{"version":3,"sources":["logic/firebase.ts","logic/authenticator.ts","logic/leaderboard handler.ts","components/end/Leaderboard.tsx","components/end/EndScreen.tsx","components/gameplay/Map.tsx","components/gameplay/AnswerSelector.tsx","components/gameplay/GuessSubmit.tsx","components/gameplay/LivesDisplay.tsx","components/gameplay/AnswerResultPopup.tsx","components/gameplay/ScoreDisplay.tsx","components/gameplay/GameScreen.tsx","components/_global/GithubFooter.tsx","components/_global/MainHeader.tsx","components/_global/SignInSection.tsx","assets/tutorial-a.svg","assets/tutorial-b.svg","components/tutorial/TutorialScreen.tsx","logic/game.ts","App.tsx","index.tsx"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","auth","provider","GoogleAuthProvider","authenticator","userDisplayName","makeAutoObservable","this","googleSignIn","bind","signOut","onAuthStateChanged","user","runInAction","displayName","signInWithPopup","then","result","setUsername","catch","error","console","log","code","name","Error","LeaderboardHandler","score","isWaitingForData","userRanking","worstPossibleRanking","previousBest","topScoresData","newScore","getAggregatedScores","uploadScore","findUserRanking","findTopScores","collection","doc","currentUser","uid","get","existingRecord","shouldUpload","exists","data","set","update","scores","FieldValue","arrayUnion","aggregatedScores","sort","a","b","bestScore","rank","i","getOrdinalSuffix","orderBy","limit","queryResult","top","docs","forEach","newDataItem","id","push","aggregateScoresRef","toString","includes","slice","lastDigit","charAt","suffix","observer","game","useContext","GameContext","setScreen","SetScreenContext","useState","handler","setHandler","useEffect","style","display","flexDirection","alignItems","color","map","index","className","onClick","initialize","username","uncompletedCountries","minHeight","mapData","require","memo","setTooltip","setAnswerSelectorPos","isPanning","setIsPanning","activeCountryId","answerOptions","userGuesses","mousePos","setMousePos","handleMouseDown","e","clientX","clientY","document","addEventListener","removeEventListener","useMousePosition","data-tip","onMouseEnter","setActiveCountryId","activeElement","blur","height","width","stroke","strokeWidth","background","orientation","center","onMoveStart","onMoveEnd","geography","geographies","geo","countryId","parseInt","rsmKey","split","countryName","getCountryNameById","userGuess","find","ans","isCompleted","completedCountries","isAnswerOption","fill","onFocus","isGameOver","handleClickCountry","onMouseLeave","show","coords","selectorElement","useRef","current","visibility","xOffset","selectorWidth","offsetWidth","window","innerWidth","left","ref","selectAnswer","country","getUserGuessByCountryName","submitGuesses","disabled","areAllGuessesMade","lives","Array","from","_","icon","faHeart","isAnswerCorrect","setIsAnswerCorrect","popupRef","speedBonusTextRef","pointsTextRef","showAnswerResult","event","detail","speedBonus","textContent","classList","remove","offsetHeight","add","faCheckCircle","faTimesCircle","fontWeight","answerSelectorPos","tooltipContent","setTooltipContent","waitingForData","countryData","setTimeout","animation","opacity","justifyContent","GithubFooter","href","MainHeader","TutorialScreen","src","tutorialA","tutorialB","Game","questionStartTime","fetchCountryData","setQuestionOrder","setAnswerOptions","isCorrect","every","guess","filter","points","Date","getTime","resetUserGuesses","resultEvent","CustomEvent","dispatchEvent","newValue","existingAnswer","answer","docRef","sortedByPopulation","toJS","popRank","countries","orderOffset","Math","random","order","min","createContext","App","screen","Provider","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e43910f7.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/analytics';\r\nimport 'firebase/firebase-auth';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCTh2ihwqmq1-ebY3BQpT640qMd0bkiyds\",\r\n  authDomain: \"where-in-the-world-1e249.firebaseapp.com\",\r\n  projectId: \"where-in-the-world-1e249\",\r\n  storageBucket: \"where-in-the-world-1e249.appspot.com\",\r\n  messagingSenderId: \"54537784020\",\r\n  appId: \"1:54537784020:web:39af78dc86fa8679ee4941\",\r\n  measurementId: \"G-6HKPRWMTD3\"\r\n};\r\n\r\nif (firebase.apps.length === 0) firebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport const db = firebase.firestore();\r\nexport const auth = firebase.auth;","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport { auth } from './firebase';\r\n\r\nconst provider = new auth.GoogleAuthProvider();\r\n\r\nclass Authenticator {\r\n  public userDisplayName = null as string | undefined | null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.googleSignIn = this.googleSignIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n\r\n    auth().onAuthStateChanged((user) => {\r\n      runInAction(() => this.userDisplayName = user?.displayName)\r\n    })\r\n  }\r\n\r\n  public googleSignIn() {\r\n    auth()\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        const user = result.user;\r\n        this.setUsername(user?.displayName);\r\n        // ...\r\n      }).catch((error) => {\r\n        console.log(error.code);\r\n      });\r\n  }\r\n\r\n  public signOut() {\r\n    auth().signOut().then(() => runInAction(() => this.userDisplayName = ''));\r\n  }\r\n\r\n  private setUsername(name: string | null | undefined) {\r\n    if (!name) throw new Error(\"Can't set a null or undefined username\");\r\n    this.userDisplayName = name;\r\n  }\r\n}\r\n\r\nconst authenticator = new Authenticator();\r\n\r\nexport default authenticator; ","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { db, auth } from './firebase';\r\nimport firebase from 'firebase/app';\r\n\r\ntype ScoreDataItem = { name: string, uid: string, score: number }\r\n\r\nexport default class LeaderboardHandler {\r\n  public isWaitingForData = true;\r\n  public userRanking: string | undefined;\r\n  public worstPossibleRanking: number | undefined;\r\n  public previousBest = -1;\r\n  public topScoresData: ScoreDataItem[] = [];\r\n  private newScore;\r\n\r\n  constructor(score: number) {\r\n    makeAutoObservable(this);\r\n    this.newScore = score;\r\n    this.getAggregatedScores()\r\n      .then(() => this.uploadScore())\r\n      .then(() => this.findUserRanking())\r\n      .then(() => this.findTopScores())\r\n      .then(() => runInAction(() => this.isWaitingForData = false));\r\n  }\r\n\r\n  private async uploadScore() {\r\n    let existingRecord = await db.collection('scores').doc(auth().currentUser?.uid).get();\r\n    let shouldUpload = true;\r\n    if (existingRecord.exists) {\r\n      this.previousBest = existingRecord.data()!.score;\r\n      if (this.previousBest >= this.newScore) {\r\n        shouldUpload = false;\r\n      }\r\n    }\r\n\r\n    if (shouldUpload) {\r\n      await db.collection('scores').doc(auth().currentUser?.uid).set({\r\n        name: auth().currentUser?.displayName,\r\n        score: this.newScore\r\n      });\r\n      await db.collection('scores').doc('aggregate').update({ scores: firebase.firestore.FieldValue.arrayUnion(this.newScore) });\r\n    }\r\n  }\r\n\r\n  private async findUserRanking() {\r\n    let aggregatedScores = await this.getAggregatedScores();\r\n    aggregatedScores = aggregatedScores.sort((a, b) => b - a);\r\n\r\n    let bestScore = this.newScore;\r\n    if (this.previousBest && this.previousBest > this.newScore) {\r\n      bestScore = this.previousBest;\r\n    }\r\n\r\n    let rank = 1;\r\n    for (let i = 0; i < aggregatedScores.length; i++) {\r\n      if (bestScore < aggregatedScores[i]) {\r\n        rank++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    runInAction(() => {\r\n      this.userRanking = `${rank + getOrdinalSuffix(rank)}`;\r\n      this.worstPossibleRanking = aggregatedScores.length;\r\n    })\r\n  }\r\n\r\n  private async findTopScores() {\r\n    let queryResult = await db.collection('scores').orderBy('score', 'desc').limit(10).get();\r\n    let top: ScoreDataItem[] = [];\r\n    queryResult.docs.forEach(doc => {\r\n      const data = doc.data();\r\n      const newDataItem: ScoreDataItem = { \r\n        name: data.name,\r\n        uid: doc.id,\r\n        score: data.score \r\n      }\r\n      top.push(newDataItem);\r\n    });\r\n    runInAction(() => this.topScoresData = top);\r\n  }\r\n\r\n  private async getAggregatedScores() {\r\n    const aggregateScoresRef = await db.collection('scores').doc('aggregate').get();\r\n    if (!aggregateScoresRef.exists) {\r\n      throw new Error(\"Aggregate score data not found!\");\r\n    }\r\n    const aggregatedScores = aggregateScoresRef.data()!.scores as number[];\r\n    return aggregatedScores;\r\n  }\r\n}\r\n\r\nfunction getOrdinalSuffix(rank: number | string) {\r\n  rank = rank.toString();\r\n  if (rank.length >= 2) {\r\n    if (['11', '12', '13'].includes(rank.slice(rank.length - 2))) {\r\n      return 'th';\r\n    }\r\n  }\r\n  const lastDigit = rank.charAt(rank.length - 1);\r\n  let suffix = '';\r\n  if (['0', '4', '5', '6', '7', '8', '9'].includes(lastDigit)) {\r\n    suffix = 'th';\r\n  } else if (lastDigit === '1') {\r\n    suffix = 'st';\r\n  } else if (lastDigit === '2') {\r\n    suffix = 'nd';\r\n  } else if (lastDigit === '3') {\r\n    suffix = 'rd';\r\n  }\r\n  return suffix;\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport './Leaderboard.css';\r\nimport { GameContext, SetScreenContext } from '../../App';\r\nimport LeaderboardHandler from '../../logic/leaderboard handler';\r\nimport { auth } from '../../logic/firebase';\r\n\r\n\r\nconst Leaderboard: React.FC = () => {\r\n  const game = useContext(GameContext);\r\n  const setScreen = useContext(SetScreenContext);\r\n  const [handler, setHandler] = useState<LeaderboardHandler>();\r\n\r\n  function newGame() {\r\n    game.initialize();\r\n    setScreen('game');\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    setHandler(new LeaderboardHandler(game.score));\r\n  }, [])\r\n\r\n  if (handler?.isWaitingForData) return null;\r\n\r\n  return (\r\n    <div id=\"leaderboard-container\">\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        {handler?.previousBest && \r\n          <div id=\"new-best-text\">\r\n            {handler.previousBest < game.score ? 'New personal best!' : `Personal best: ${handler.previousBest}`}\r\n          </div>}\r\n        <div>Your global ranking:</div>\r\n        <div id=\"user-ranking\">{handler?.userRanking}</div>\r\n        <div style={{ color: 'gray' }}>(out of {handler?.worstPossibleRanking})</div>\r\n        <div id=\"leaderboard-header\">Hall of Fame</div>\r\n        <div id=\"leaderboard\">\r\n          {handler?.topScoresData.map((data, index) => (\r\n            <div \r\n              className={\"leaderboard-listing \" + (data.uid === auth().currentUser?.uid ? 'user-leaderboard-listing' : '')} \r\n              key={index}>\r\n              <div className=\"leaderboard-number\">#{index + 1}</div>\r\n              <div className=\"leaderboard-name\">{data.name}</div>\r\n              <div className=\"leaderboard-score\">{data.score}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <button className=\"start-game-button\" onClick={newGame}>Play again</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(Leaderboard);","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { GameContext } from '../../App';\r\nimport authenticator from '../../logic/authenticator';\r\nimport './EndScreen.css';\r\nimport Leaderboard from './Leaderboard';\r\n\r\nconst EndScreen: React.FC = () => {\r\n  let game = useContext(GameContext);\r\n  const username = authenticator.userDisplayName;\r\n\r\n  return (\r\n    <div id=\"end-screen\">\r\n      <h2 id=\"game-over-text\">\r\n        {game.uncompletedCountries.length === 0 ? 'Every country found!' : 'Game over!'}\r\n      </h2>\r\n      <div>Your score:</div>\r\n      <div id=\"end-score\">{game.score} points</div>\r\n      <div style={{ minHeight: '30px' }} />\r\n      {!!authenticator.userDisplayName ?\r\n        <Leaderboard />\r\n        : <>\r\n          <div className=\"signed-in-text\">Sign in to see how you compare to other players!</div>\r\n          <div style={{ minHeight: '10px' }} />\r\n          <button\r\n            className=\"sign-in-button\"\r\n            onClick={!!username ? authenticator.signOut : authenticator.googleSignIn}>\r\n            Sign in\r\n          </button>\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(EndScreen);","import React, { memo, useContext, useEffect, useState } from 'react';\r\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\r\nimport { PatternLines } from '@vx/pattern';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { GameContext } from '../../App';\r\nimport './Map.css';\r\nconst mapData = require('../../assets/topo.json');\r\n\r\ninterface Props {\r\n  setTooltip: (content: string) => void,\r\n  setAnswerSelectorPos: (coords: [number, number]) => void\r\n}\r\n\r\nconst Map: React.FC<Props> = ({ setTooltip, setAnswerSelectorPos }) => {\r\n  const [isPanning, setIsPanning] = useState(false);\r\n  const game = useContext(GameContext);\r\n  const activeCountryId = game.activeCountryId;\r\n  const answerOptions = game.answerOptions;\r\n  const userGuesses = game.userGuesses;\r\n  const mousePos = useMousePosition();\r\n\r\n  function handleClickCountry(countryName: string, countryId: number) {\r\n    if (game.isGameOver) return;\r\n    if (game.answerOptions.includes(countryName)) {\r\n      setAnswerSelectorPos([mousePos[0], mousePos[1]]);\r\n      game.setActiveCountryId(countryId);\r\n    }\r\n    setTooltip('');\r\n  }\r\n\r\n  function removeCountryFocus() {\r\n    game.setActiveCountryId(-1);\r\n    try {\r\n      (document.activeElement as HTMLElement).blur();\r\n    } catch {}\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id=\"map-container\">\r\n        <ComposableMap id=\"main-map\" data-tip=\"\" onMouseEnter={removeCountryFocus}>\r\n          <PatternLines\r\n            id=\"answered\" height={4} width={4} stroke=\"#776865\" strokeWidth={0.5}\r\n            background=\"skyblue\" orientation={[\"diagonal\"]}\r\n          />\r\n          <ZoomableGroup center={[16, 0]} onMoveStart={() => setIsPanning(true)} onMoveEnd={() => setIsPanning(false)}>\r\n            <Geographies geography={mapData}>\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const countryId = parseInt(geo.rsmKey.split('-')[1]);\r\n                  const countryName = game.getCountryNameById(countryId);\r\n                  const userGuess = userGuesses.find(ans => ans.id === countryId)?.countryName;\r\n                  const isCompleted = game.completedCountries.includes(countryName);\r\n                  const isAnswerOption = answerOptions.includes(countryName);\r\n                  return (<Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    className={`\r\n                      geography \r\n                      ${isAnswerOption && (!!userGuess ? 'country-answered' : 'country-answer-option')} \r\n                      ${isCompleted && 'country-completed'} \r\n                      ${activeCountryId === countryId && 'country-active'}\r\n                    `}\r\n                    fill={isAnswerOption ?\r\n                      (!!userGuess ? 'url(#answered)' : 'orange')\r\n                      : 'rgb(225, 225, 225)'\r\n                    }\r\n                    onFocus={() => handleClickCountry(countryName, countryId)}\r\n                    onMouseEnter={() => setTooltip((() => {\r\n                      if (isPanning) return '';\r\n                      if (isAnswerOption) {\r\n                        return game.isGameOver ? countryName : `${userGuess}?`;\r\n                      } \r\n                      return (isCompleted ? countryName : '')\r\n                    })())}\r\n                    onMouseLeave={() => setTooltip('')}\r\n                  />)\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        </ComposableMap>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction useMousePosition() {\r\n  const [mousePos, setMousePos] = useState([0,0]);\r\n\r\n  useEffect(() => {\r\n    function handleMouseDown(e: MouseEvent) {\r\n      setMousePos([e.clientX, e.clientY]);\r\n    }\r\n    document.addEventListener('mousedown', handleMouseDown, true)\r\n    return () => document.removeEventListener('mousedown', handleMouseDown, true);\r\n  }, [])\r\n\r\n  return mousePos;\r\n}\r\n\r\nexport default memo(observer(Map));","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useRef } from 'react';\r\nimport { GameContext } from '../../App';\r\nimport './AnswerSelector.css';\r\n\r\ninterface Props {\r\n  show: boolean,\r\n  coords: [number, number]\r\n}\r\n\r\nconst AnswerSelector: React.FC<Props> = ({ show, coords }) => {\r\n  const game = useContext(GameContext);\r\n  const selectorElement = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (selectorElement.current) {\r\n      selectorElement.current.style.visibility = show ? 'visible' : 'hidden';\r\n      if (!show) return;\r\n      let xOffset = 0;\r\n      const selectorWidth = selectorElement.current.offsetWidth;\r\n      if (coords[0] > window.innerWidth - selectorWidth) {\r\n        xOffset = selectorWidth - 50;\r\n      }\r\n\r\n      selectorElement.current.style.left = (coords[0] - xOffset) + 'px';\r\n      selectorElement.current.style.top = coords[1] + 'px';\r\n    }\r\n  }, [coords, show])\r\n\r\n  return (\r\n    <div>\r\n      <div ref={selectorElement} id=\"answer-selector\">\r\n        <div id=\"answer-selector-prompt-text\">Where is this?</div>\r\n        {game.answerOptions.map((name, index) => (\r\n          <button\r\n            onClick={() => game.selectAnswer(name)}\r\n            key={index}\r\n            className=\"answer-button\">\r\n            {name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(AnswerSelector);","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { GameContext } from '../../App';\r\nimport './GuessSubmit.css';\r\n\r\nconst GuessSubmit: React.FC = () => {\r\n  const game = useContext(GameContext);\r\n  return (\r\n    <div id=\"guess-submit\">\r\n      <div id=\"answer-options-list\">\r\n        <span id=\"find-text\">Find:</span>\r\n        {game.answerOptions.map((country, index) => (\r\n          <div\r\n            key={index}\r\n            className={`\r\n                answer-option \r\n                ${!!game.getUserGuessByCountryName(country) ?\r\n                'answer-option-selected'\r\n                : 'answer-option-unselected'}\r\n              `}>\r\n            {country}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button\r\n        onClick={game.submitGuesses}\r\n        id=\"submit-guess-button\"\r\n        disabled={!game.areAllGuessesMade()}>\r\n        Check answers\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GuessSubmit);","import React, { useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { GameContext } from '../../App';\r\nimport './LivesDisplay.css';\r\n\r\nconst LivesDisplay: React.FC = () => {\r\n  const game = useContext(GameContext);\r\n  const lives = game.lives;\r\n  return (\r\n    <div className=\"game-hud-container\">\r\n      <div className=\"game-hud-content\">\r\n        <span className=\"game-hud-label\">Lives</span>\r\n        {Array.from({ length: 3 }).map((_, index) => (\r\n          <div key={index} className=\"life\">\r\n            <FontAwesomeIcon\r\n              icon={faHeart}\r\n              className={lives > index ? 'life-active' : 'life-lost'}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(LivesDisplay);","import { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { GameContext } from '../../App';\r\nimport './AnswerResultPopup.css';\r\n\r\nconst AnswerResultPopup: React.FC = () => {\r\n  const game = useContext(GameContext);\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\r\n  const popupRef = useRef<HTMLDivElement>(null);\r\n  const speedBonusTextRef = useRef<HTMLDivElement>(null);\r\n  const pointsTextRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    function showAnswerResult(event: any) {\r\n      const { result, speedBonus } = event.detail as { result: 'correct' | 'incorrect', speedBonus: boolean };\r\n      speedBonusTextRef.current!.style.display = speedBonus ? 'block' : 'none';\r\n        if (result === 'correct') {\r\n          pointsTextRef.current!.textContent = (speedBonus ? '+30' : '+10') + ' points';\r\n        } else {\r\n          pointsTextRef.current!.textContent = game.lives > 0 ? 'Try again.' : 'Out of lives!';\r\n        }\r\n        popupRef.current?.classList.remove('answer-result-displayed');\r\n        void popupRef.current?.offsetHeight;\r\n        popupRef.current?.classList.add('answer-result-displayed');\r\n        setIsAnswerCorrect(result === 'correct' ? true : false);\r\n    }\r\n\r\n    document.addEventListener('answerResult', showAnswerResult);\r\n    return () => document.removeEventListener('answerResult', showAnswerResult);\r\n  }, [])\r\n\r\n  return (\r\n    <div ref={popupRef} id=\"answer-result-popup-container\">\r\n      <div id=\"answer-result-popup-card\">\r\n        <FontAwesomeIcon\r\n          id=\"answer-result-icon\"\r\n          icon={isAnswerCorrect ? faCheckCircle : faTimesCircle}\r\n          color={isAnswerCorrect ? \"rgb(49, 173, 69)\" : \"rgb(191, 48, 46)\"} />\r\n        <div id=\"answer-result-main-text\">\r\n          {isAnswerCorrect ? 'Correct!' : 'Incorrect!'}\r\n        </div>\r\n        <div ref={pointsTextRef} id=\"answer-result-sub-text\" />\r\n        <div ref={speedBonusTextRef} style={{color: \"rgb(49, 173, 69)\"}}>Speed bonus!</div>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(AnswerResultPopup);","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { GameContext } from '../../App';\r\n\r\nconst ScoreDisplay: React.FC = () => {\r\n  const game = useContext(GameContext);\r\n  const score = game.score;\r\n  return (\r\n    <div className=\"game-hud-container\">\r\n      <div className=\"game-hud-content\">\r\n        <span className=\"game-hud-label\">Score</span>\r\n        <span style={{fontWeight: 600}}>{score}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(ScoreDisplay);","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport Map from './Map';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport AnswerSelector from './AnswerSelector';\r\nimport { GameContext, SetScreenContext } from '../../App';\r\nimport GuessSubmit from './GuessSubmit';\r\nimport LivesDisplay from './LivesDisplay';\r\nimport AnswerResultPopup from './AnswerResultPopup';\r\nimport ScoreDisplay from './ScoreDisplay';\r\nimport './GameScreen.css';\r\n\r\nconst GameScreen: React.FC = () => {\r\n  const setScreen = useContext(SetScreenContext);\r\n  const game = useContext(GameContext);\r\n  const [answerSelectorPos, setAnswerSelectorPos] = useState([0, 0] as [number, number]);\r\n  const [tooltipContent, setTooltipContent] = useState('');\r\n  const waitingForData = game.countryData.length === 0;\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', () => setTooltipContent(''), true);\r\n    return () => document.removeEventListener('mousedown', () => setTooltipContent(''), true);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (game.isGameOver) {\r\n      setTimeout(() => {\r\n        setScreen('end');\r\n      }, 3000);\r\n    }\r\n  }, [game.isGameOver])\r\n\r\n  return (\r\n    <div style={{ animation: 'fade-in forwards 0.8s linear' }}>\r\n      <div id=\"game-screen-container\" style={{ opacity: game.isGameOver ? 0 : 1 }}>\r\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n        <AnswerSelector show={game.activeCountryId >= 0} coords={answerSelectorPos} />\r\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n          <LivesDisplay />\r\n          <ScoreDisplay />\r\n        </div>\r\n        <AnswerResultPopup />\r\n        <Map\r\n          setTooltip={setTooltipContent}\r\n          setAnswerSelectorPos={setAnswerSelectorPos}\r\n        />\r\n        {!waitingForData &&\r\n          <GuessSubmit />\r\n        }\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default observer(GameScreen);","import React from 'react';\r\nimport './GithubFooter.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst GithubFooter = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <div>by mangonaise</div>\r\n      <FontAwesomeIcon icon={faHeart} color=\"rgb(230, 101, 144)\"/>\r\n      <a href=\"https://github.com/mangonaise/where-in-the-world\">github</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GithubFooter;","import React from 'react';\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = () => {\r\n  return (\r\n    <h1 id=\"main-header\">\r\n      <span className=\"title-a\">where</span>\r\n      <span className=\"title-b\">in</span>\r\n      <span className=\"title-c\">the</span>\r\n      <span className=\"title-d\">world</span>\r\n    </h1>\r\n  )\r\n}\r\n\r\nexport default MainHeader;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport auth from '../../logic/authenticator';\r\nimport './SignInSection.css';\r\n\r\nconst SignInSection: React.FC = () => {\r\n  const username = auth.userDisplayName;\r\n  return (\r\n    <div id=\"sign-in-section\">\r\n      <div className=\"signed-in-text\">\r\n        {!!username ? <span>Signed in as <strong>{username}</strong></span> : 'Sign in to save your score'} \r\n      </div>\r\n      <button\r\n        className=\"sign-in-button\"\r\n        onClick={!!username ? auth.signOut : auth.googleSignIn}>{!!username ? 'Sign out' : 'Sign in'}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(SignInSection);","export default __webpack_public_path__ + \"static/media/tutorial-a.f27bf1bc.svg\";","export default __webpack_public_path__ + \"static/media/tutorial-b.5ba84acf.svg\";","import React, { useContext } from 'react';\r\nimport { SetScreenContext } from '../../App';\r\nimport './TutorialScreen.css';\r\nimport tutorialA from '../../assets/tutorial-a.svg';\r\nimport tutorialB from '../../assets/tutorial-b.svg';\r\n\r\nconst TutorialScreen: React.FC = () => {\r\n  const setScreen = useContext(SetScreenContext);\r\n  return (\r\n    <div id=\"tutorial-screen\">\r\n      <div id=\"tutorial-container\">\r\n        <span className=\"tutorial-text\">Three countries will be highlighted on a world map.</span>\r\n        <img src={tutorialA} />\r\n\r\n        <span className=\"tutorial-text\">Select each country and guess its name.</span>\r\n        <img src={tutorialB} />\r\n\r\n        <span className=\"tutorial-text\">Once you’ve guessed all three, check your answers.</span>\r\n        <div id=\"tutorial-check-answers\">Check answers</div>\r\n      </div>\r\n      <button className=\"start-game-button\" onClick={() => setScreen('game')}>\r\n        Let's go!\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialScreen;","import { db } from './firebase';\r\nimport { makeAutoObservable, runInAction, toJS } from 'mobx';\r\n\r\ntype CountryDataItem = {\r\n  id: number,\r\n  name: string,\r\n  popRank: number\r\n}\r\n\r\nclass Game {\r\n  public isGameOver = false;\r\n  public countryData: CountryDataItem[] = [];\r\n  public uncompletedCountries: string[] = [];\r\n  public completedCountries: string[] = [];\r\n  public answerOptions: string[] = [];\r\n  public userGuesses: Array<{ id: number, countryName: string }> = [];\r\n  public activeCountryId: number = -1;\r\n  public lives = 3;\r\n  public score = 0;\r\n  private questionStartTime = 0;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.initialize = this.initialize.bind(this);\r\n    this.submitGuesses = this.submitGuesses.bind(this);\r\n    this.initialize();\r\n  }\r\n\r\n  public initialize() {\r\n    this.isGameOver = false;\r\n    this.countryData = [];\r\n    this.uncompletedCountries = [];\r\n    this.completedCountries = [];\r\n    this.answerOptions = [];\r\n    this.userGuesses = [];\r\n    this.activeCountryId = -1;\r\n    this.lives = 3;\r\n    this.score = 0;\r\n    this.fetchCountryData().then(() => {\r\n      this.setQuestionOrder();\r\n      this.setAnswerOptions();\r\n    });\r\n  }\r\n\r\n  public submitGuesses() {\r\n    const isCorrect = this.userGuesses.every(guess => (\r\n      this.getCountryNameById(guess.id) === guess.countryName\r\n    ))\r\n\r\n    let speedBonus = false;\r\n\r\n    if (isCorrect) {\r\n      this.uncompletedCountries = this.uncompletedCountries.filter(name => !this.answerOptions.includes(name));\r\n      this.answerOptions.forEach(name => this.completedCountries.push(name));\r\n      const currentTime = new Date().getTime();\r\n      speedBonus = currentTime - this.questionStartTime < 10000;\r\n      const points = speedBonus ? 30 : 10;\r\n      this.score += points;\r\n      this.setAnswerOptions();\r\n    } else {\r\n      this.lives--;\r\n      this.resetUserGuesses();\r\n    }\r\n\r\n    if (this.lives === 0 || this.uncompletedCountries.length === 0) {\r\n      this.isGameOver = true;\r\n    }\r\n\r\n    const resultEvent =\r\n      new CustomEvent('answerResult', {\r\n        detail: { result: isCorrect ? 'correct' : 'incorrect', speedBonus }\r\n      });\r\n    document.dispatchEvent(resultEvent);\r\n  }\r\n\r\n  public getCountryNameById(id: number) {\r\n    const country = this.countryData.find(data => data.id === id);\r\n    return country?.name ?? '';\r\n  }\r\n\r\n  public setActiveCountryId(newValue: number) {\r\n    runInAction(() => this.activeCountryId = newValue);\r\n  }\r\n\r\n  public selectAnswer(countryName: string) {\r\n    const existingAnswer = this.getUserGuessByCountryName(countryName);\r\n    if (existingAnswer) {\r\n      existingAnswer.countryName = '';\r\n    }\r\n    const answer = this.userGuesses.find(ans => ans.id === this.activeCountryId);\r\n    if (answer) {\r\n      answer.countryName = countryName;\r\n    } else {\r\n      throw new Error(`Can't select answer ${countryName} as id ${this.activeCountryId} was not found in list.`)\r\n    }\r\n    this.activeCountryId = -1;\r\n  }\r\n\r\n  public getUserGuessByCountryName(countryName: string) {\r\n    return this.userGuesses.find(answer => answer.countryName === countryName);\r\n  }\r\n\r\n  public areAllGuessesMade() {\r\n    return this.userGuesses.every(guess => guess.countryName !== '');\r\n  }\r\n\r\n  private async fetchCountryData() {\r\n    const docRef = await db.collection('gameData').doc('countryData').get();\r\n    if (!docRef.exists) {\r\n      throw new Error(\"Country data not found!\");\r\n    }\r\n    runInAction(() => {\r\n      this.countryData = docRef.data()!.data as CountryDataItem[];\r\n    })\r\n  }\r\n\r\n  private setQuestionOrder() {\r\n    // Maximum distance an item index can move when the order is shuffled.\r\n    const randomnessAmount = 50;\r\n\r\n    const sortedByPopulation = [...toJS(this.countryData)].sort((a, b) => a.popRank - b.popRank);\r\n    let countries: Array<{ id: number, name: string, order: number }> = [];\r\n    for (let i = 0; i < sortedByPopulation.length; i++) {\r\n      const orderOffset = Math.random() * randomnessAmount * 2 - randomnessAmount;\r\n      countries.push({\r\n        id: sortedByPopulation[i].id,\r\n        name: sortedByPopulation[i].name,\r\n        order: i + orderOffset\r\n      });\r\n    }\r\n\r\n    countries.sort((a, b) => a.order - b.order);\r\n    countries.forEach(country => this.uncompletedCountries.push(country.name));\r\n  }\r\n\r\n  private setAnswerOptions() {\r\n    this.answerOptions = [];\r\n    for (let i = 0; i < Math.min(3, this.uncompletedCountries.length); i++) {\r\n      const nextCountry = this.uncompletedCountries[i];\r\n      if (nextCountry) this.answerOptions.push(this.uncompletedCountries[i]);\r\n    }\r\n    this.questionStartTime = new Date().getTime();\r\n    this.resetUserGuesses();\r\n  }\r\n\r\n  private resetUserGuesses() {\r\n    this.userGuesses = [];\r\n    this.answerOptions.forEach(answer => {\r\n      this.userGuesses.push({\r\n        id: this.countryData.find(data => data.name === answer)!.id,\r\n        countryName: ''\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { createContext, useState } from 'react';\r\nimport './App.css';\r\nimport EndScreen from './components/end/EndScreen';\r\nimport GameScreen from './components/gameplay/GameScreen';\r\nimport GithubFooter from './components/_global/GithubFooter';\r\nimport MainHeader from './components/_global/MainHeader';\r\nimport SignInSection from './components/_global/SignInSection';\r\nimport TutorialScreen from './components/tutorial/TutorialScreen';\r\nimport Game from './logic/game';\r\n\r\ntype Screen = 'tutorial' | 'game' | 'end';\r\ntype ScreenSetter = React.Dispatch<React.SetStateAction<Screen>>;\r\nexport const SetScreenContext = createContext<ScreenSetter>({} as ScreenSetter);\r\n\r\nconst game = new Game();\r\nexport const GameContext = createContext<Game>({} as Game);\r\n\r\nfunction App() {\r\n  const [screen, setScreen] = useState<Screen>('tutorial');\r\n\r\n  return (\r\n    <div id=\"app-container\">\r\n      <SignInSection />\r\n      <MainHeader />\r\n\r\n      <SetScreenContext.Provider value={setScreen}>\r\n        {screen === 'tutorial' && <TutorialScreen />}\r\n        <GameContext.Provider value={game}>\r\n          {screen === 'game' && <GameScreen />}\r\n          {screen === 'end' && <EndScreen />}\r\n        </GameContext.Provider>\r\n      </SetScreenContext.Provider>\r\n\r\n      <GithubFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}